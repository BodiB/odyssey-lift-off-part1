{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar core = require('@emotion/core');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n/** @jsx jsx */\n\n\nvar ButtonIcon = /*#__PURE__*/React__default.forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      iconSize = _a.iconSize;\n  return core.jsx(\"span\", {\n    className: className,\n    ref: ref,\n    css: core.css({\n      alignItems: \"center\",\n      // This needs to be `inline-flex` and not the default of\n      // `inline-block` to vertically center the icon automatically\n      display: \"inline-flex\",\n      height: iconSize,\n      justifyContent: \"center\",\n      // The `4px` will be on the right to separate the icon from the text\n      width: iconSize\n    })\n  }, children);\n});\nexports.ButtonIcon = ButtonIcon;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;;AACA,IAcaA,UAAU,gBAAGC,cAAK,CAACC,UAAND,CAGxB,UAACE,EAAD,EAAoCC,GAApC;MAAGC,QAAQ;MAAEC,SAAS;MAAEC,QAAQ;SAE9BC;AACEF,aAAS,EAAEA,SADbE;AAEEJ,OAAG,EAAEA,GAFPI;AAGEC,OAAG,EAAEA,SAAI;AACPC,gBAAU,EAAE,QADL;;;AAIPC,aAAO,EAAE,aAJF;AAKPC,YAAM,EAAEL,QALD;AAMPM,oBAAc,EAAE,QANT;;AAQPC,WAAK,EAAEP;AARA,KAAJE;AAHPD,KAcGH,QAdHG;AALsB,EAd1B","names":["ButtonIcon","React","forwardRef","_a","ref","children","className","iconSize","jsx","css","alignItems","display","height","justifyContent","width"],"sources":["../../src/Button/button/ButtonIcon.tsx"],"sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport { css, jsx } from \"@emotion/core\";\n\ninterface ButtonIconProps\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.HTMLAttributes<HTMLSpanElement>,\n      HTMLSpanElement\n    >,\n    \"className\"\n  > {\n  iconSize: number;\n}\n\nexport const ButtonIcon = React.forwardRef<\n  HTMLSpanElement,\n  React.PropsWithChildren<ButtonIconProps>\n>(({ children, className, iconSize }, ref) => {\n  return (\n    <span\n      className={className}\n      ref={ref}\n      css={css({\n        alignItems: \"center\",\n        // This needs to be `inline-flex` and not the default of\n        // `inline-block` to vertically center the icon automatically\n        display: \"inline-flex\",\n        height: iconSize,\n        justifyContent: \"center\",\n        // The `4px` will be on the right to separate the icon from the text\n        width: iconSize,\n      })}\n    >\n      {children}\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"script"}