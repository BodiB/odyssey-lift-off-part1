{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _tslib = require('../_tslib-bcbe0269.js');\n\nvar core = require('@emotion/core');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar colors = require('../colors/colors.js');\n\nvar index = require('../SpaceKitProvider/index.js');\n\nvar LoadingSpinner = /*#__PURE__*/React__default.forwardRef(function (_a, ref) {\n  var propTheme = _a.theme,\n      _b = _a.size,\n      size = _b === void 0 ? \"medium\" : _b,\n      className = _a.className,\n      props = _tslib.__rest(_a, [\"theme\", \"size\", \"className\"]);\n\n  var providerTheme = index.useSpaceKitProvider().theme;\n  var theme = propTheme || providerTheme;\n  /* Length of animation */\n\n  var DURATION = 1000;\n  var SPIN = core.keyframes(templateObject_1 || (templateObject_1 = _tslib.__makeTemplateObject([\"\\n    0% { transform: rotate(0) }\\n    100% { transform: rotate(360deg) }\\n  \"], [\"\\n    0% { transform: rotate(0) }\\n    100% { transform: rotate(360deg) }\\n  \"])));\n  var SIZE_MAP = {\n    large: 90,\n    medium: 64,\n    small: 48,\n    xsmall: 32,\n    \"2xsmall\": 16\n  };\n  var THEME_MAP = {\n    light: {\n      orbitColor: colors.colors.silver.base,\n      orbitOpacity: 1,\n      asteroidColor: colors.colors.blue.base\n    },\n    dark: {\n      orbitColor: colors.colors.white,\n      orbitOpacity: 0.5,\n      asteroidColor: colors.colors.white\n    },\n    grayscale: {\n      orbitColor: colors.colors.silver.darker,\n      orbitOpacity: 1,\n      asteroidColor: colors.colors.grey.light\n    }\n  };\n  var disableAnimations = index.useSpaceKitProvider().disableAnimations;\n  var _c = THEME_MAP[theme],\n      orbitColor = _c.orbitColor,\n      orbitOpacity = _c.orbitOpacity,\n      asteroidColor = _c.asteroidColor;\n  var pixelSize = SIZE_MAP[size];\n  var mountTime = React__default.useRef(Date.now());\n  var mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);\n  return core.jsx(\"svg\", _tslib.__assign({\n    className: className,\n    ref: ref,\n    role: \"progressbar\",\n    viewBox: \"0 0 100 100\",\n    css: {\n      width: pixelSize,\n      height: pixelSize\n    }\n  }, props), core.jsx(\"circle\", {\n    strokeWidth: \"8\",\n    stroke: orbitColor,\n    strokeOpacity: orbitOpacity,\n    fill: \"transparent\",\n    r: \"41\",\n    cx: \"50\",\n    cy: \"50\"\n  }), core.jsx(\"g\", {\n    transform: \"translate(50 50)\"\n  }, core.jsx(\"circle\", {\n    css: {\n      animation: SPIN + \" \" + DURATION + \"ms linear infinite\",\n      willChange: \"transform\",\n      animationDelay: mountDelay + \"ms\"\n    },\n    fill: asteroidColor,\n    r: \"10\",\n    cx: \"40\",\n    cy: \"0\"\n  })));\n});\nvar templateObject_1;\nexports.LoadingSpinner = LoadingSpinner;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;IA4BaA,cAAc,gBAAGC,cAAK,CAACC,UAAND,CAC5B,UAACE,EAAD,EAA6DC,GAA7D;MAAUC,SAAS;MAAEC;MAAAC,IAAI,mBAAG,QAAH,GAAGD;MAAUE,SAAS;MAAKC,KAAK,qBAAxD,8BAAwD;;MACxCC,aAAa,GAAKC,4BAAmBC;MAC9CA,KAAK,GAAGP,SAAS,IAAIK;;;MAGrBG,QAAQ,GAAG;MAEXC,IAAI,GAAGC,eAASC,0OAATD;MAKPE,QAAQ,GAAyB;AACrCC,SAAK,EAAE,EAD8B;AAErCC,UAAM,EAAE,EAF6B;AAGrCC,SAAK,EAAE,EAH8B;AAIrCC,UAAM,EAAE,EAJ6B;eAK1B;AAL0B;MAQjCC,SAAS,GAOX;AACFC,SAAK,EAAE;AACLC,gBAAU,EAAEC,cAAOC,MAAPD,CAAcE,IADrB;AAELC,kBAAY,EAAE,CAFT;AAGLC,mBAAa,EAAEJ,cAAOK,IAAPL,CAAYE;AAHtB,KADL;AAMFI,QAAI,EAAE;AACJP,gBAAU,EAAEC,cAAOO,KADf;AAEJJ,kBAAY,EAAE,GAFV;AAGJC,mBAAa,EAAEJ,cAAOO;AAHlB,KANJ;AAWFC,aAAS,EAAE;AACTT,gBAAU,EAAEC,cAAOC,MAAPD,CAAcS,MADjB;AAETN,kBAAY,EAAE,CAFL;AAGTC,mBAAa,EAAEJ,cAAOU,IAAPV,CAAYF;AAHlB;AAXT;MAkBIa,iBAAiB,GAAKzB,4BAAmByB;MAE3CC,KAA8Cf,SAAS,CAACV,KAAD;MAArDY,UAAU;MAAEI,YAAY;MAAEC,aAAa;MAEzCS,SAAS,GAAGrB,QAAQ,CAACV,IAAD;MAEpBgC,SAAS,GAAGtC,cAAK,CAACuC,MAANvC,CAAawC,IAAI,CAACC,GAALD,EAAbxC;MACZ0C,UAAU,GAAGP,iBAAiB,GAAG,CAAH,GAAO,EAAEG,SAAS,CAACK,OAAVL,GAAoB1B,QAAtB;SAGzCgC;AACErC,aAAS,EAAEA,SADbqC;AAEEzC,OAAG,EAAEA,GAFPyC;AAGEC,QAAI,EAAC,aAHPD;AAIEE,WAAO,EAAC,aAJVF;AAKEG,OAAG,EAAE;AACHC,WAAK,EAAEX,SADJ;AAEHY,YAAM,EAAEZ;AAFL;AALPO,KASMpC,KATNoC,GAWEA;AACEM,eAAW,EAAC,GADdN;AAEEO,UAAM,EAAE5B,UAFVqB;AAGEQ,iBAAa,EAAEzB,YAHjBiB;AAIES,QAAI,EAAC,aAJPT;AAKEU,KAAC,EAAC,IALJV;AAMEW,MAAE,EAAC,IANLX;AAOEY,MAAE,EAAC;AAPLZ,IAXFA,EAoBEA;AAAGa,aAAS,EAAC;AAAbb,KACEA;AACEG,OAAG,EAAE;AACHW,eAAS,EAAK7C,IAAI,MAAJA,GAAQD,QAARC,uBADX;AAEH8C,gBAAU,EAAE,WAFT;AAGHC,oBAAc,EAAKlB,UAAU;AAH1B,KADPE;AAMES,QAAI,EAAEzB,aANRgB;AAOEU,KAAC,EAAC,IAPJV;AAQEW,MAAE,EAAC,IARLX;AASEY,MAAE,EAAC;AATLZ,IADFA,CApBFA;AAxDwB","names":["LoadingSpinner","React","forwardRef","_a","ref","propTheme","_b","size","className","props","providerTheme","useSpaceKitProvider","theme","DURATION","SPIN","keyframes","templateObject_1","SIZE_MAP","large","medium","small","xsmall","THEME_MAP","light","orbitColor","colors","silver","base","orbitOpacity","asteroidColor","blue","dark","white","grayscale","darker","grey","disableAnimations","_c","pixelSize","mountTime","useRef","Date","now","mountDelay","current","jsx","role","viewBox","css","width","height","strokeWidth","stroke","strokeOpacity","fill","r","cx","cy","transform","animation","willChange","animationDelay"],"sources":["../src/Loaders/LoadingSpinner.tsx"],"sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport type { Property } from \"csstype\";\nimport { jsx, keyframes } from \"@emotion/core\";\nimport { colors } from \"../colors\";\nimport { useSpaceKitProvider } from \"../SpaceKitProvider\";\n\nexport type Size = \"large\" | \"medium\" | \"small\" | \"xsmall\" | \"2xsmall\";\nexport type Theme = \"light\" | \"dark\" | \"grayscale\";\ninterface Props {\n  /**\n   * Class name that will be applied to the svg\n   */\n  className?: string;\n\n  /**\n   * Theme for the spinner\n   * @default \"light\"\n   */\n  theme?: Theme;\n\n  /**\n   * Size of the spinner\n   * @default \"medium\"\n   */\n  size?: Size;\n}\n\nexport const LoadingSpinner = React.forwardRef<SVGSVGElement, Props>(\n  ({ theme: propTheme, size = \"medium\", className, ...props }, ref) => {\n    const { theme: providerTheme } = useSpaceKitProvider();\n    const theme = propTheme || providerTheme;\n\n    /* Length of animation */\n    const DURATION = 1000;\n\n    const SPIN = keyframes`\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  `;\n\n    const SIZE_MAP: Record<Size, number> = {\n      large: 90,\n      medium: 64,\n      small: 48,\n      xsmall: 32,\n      \"2xsmall\": 16,\n    };\n\n    const THEME_MAP: Record<\n      Theme,\n      {\n        orbitColor: Property.Color;\n        orbitOpacity: Property.Opacity;\n        asteroidColor: Property.Color;\n      }\n    > = {\n      light: {\n        orbitColor: colors.silver.base,\n        orbitOpacity: 1,\n        asteroidColor: colors.blue.base,\n      },\n      dark: {\n        orbitColor: colors.white,\n        orbitOpacity: 0.5,\n        asteroidColor: colors.white,\n      },\n      grayscale: {\n        orbitColor: colors.silver.darker,\n        orbitOpacity: 1,\n        asteroidColor: colors.grey.light,\n      },\n    };\n\n    const { disableAnimations } = useSpaceKitProvider();\n\n    const { orbitColor, orbitOpacity, asteroidColor } = THEME_MAP[theme];\n\n    const pixelSize = SIZE_MAP[size];\n\n    const mountTime = React.useRef(Date.now());\n    const mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);\n\n    return (\n      <svg\n        className={className}\n        ref={ref}\n        role=\"progressbar\"\n        viewBox=\"0 0 100 100\"\n        css={{\n          width: pixelSize,\n          height: pixelSize,\n        }}\n        {...props}\n      >\n        <circle\n          strokeWidth=\"8\"\n          stroke={orbitColor}\n          strokeOpacity={orbitOpacity}\n          fill=\"transparent\"\n          r=\"41\"\n          cx=\"50\"\n          cy=\"50\"\n        />\n        <g transform=\"translate(50 50)\">\n          <circle\n            css={{\n              animation: `${SPIN} ${DURATION}ms linear infinite`,\n              willChange: \"transform\",\n              animationDelay: `${mountDelay}ms`,\n            }}\n            fill={asteroidColor}\n            r=\"10\"\n            cx=\"40\"\n            cy=\"0\"\n          />\n        </g>\n      </svg>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"script"}