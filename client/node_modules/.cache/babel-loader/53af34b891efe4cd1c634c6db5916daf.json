{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _tslib = require('../_tslib-bcbe0269.js');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar defaultState = {\n  disableAnimations: false,\n  singletonComponents: {},\n  theme: \"light\"\n}; // This implementation is based on the excellent blog post by Kent C. Dodds on\n// How to use React Context effectively:\n// https://kentcdodds.com/blog/how-to-use-react-context-effectively\n\nvar SpaceKitStateContext = /*#__PURE__*/React__default.createContext(undefined);\nvar SpaceKitSetContext = /*#__PURE__*/React__default.createContext(undefined);\n/**\r\n * Provider to set options on all Space Kit components\r\n *\r\n * This is completely optional; components will not have issues if this is\r\n * missing from the context.\r\n *\r\n * A good place to use this would be in your storybook configuration as a\r\n * decorator applied to all components if we're running inside of chromatic.\r\n */\n\nvar SpaceKitProvider = function (_a) {\n  var _b;\n\n  var children = _a.children,\n      theme = _a.theme,\n      disableAnimations = _a.disableAnimations;\n  var nextState = React.useMemo(function () {\n    return {\n      theme: theme !== null && theme !== void 0 ? theme : defaultState.theme,\n      disableAnimations: disableAnimations !== null && disableAnimations !== void 0 ? disableAnimations : defaultState.disableAnimations,\n      singletonComponents: {}\n    };\n  }, [theme, disableAnimations]);\n\n  var _c = React__default.useState(nextState),\n      state = _c[0],\n      setState = _c[1];\n\n  React.useEffect(function () {\n    setState(function (currState) {\n      return _tslib.__assign(_tslib.__assign({}, nextState), {\n        singletonComponents: currState.singletonComponents\n      });\n    });\n  }, [nextState]);\n  return /*#__PURE__*/React__default.createElement(SpaceKitStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React__default.createElement(SpaceKitSetContext.Provider, {\n    value: setState\n  }, Object.entries((_b = state === null || state === void 0 ? void 0 : state.singletonComponents) !== null && _b !== void 0 ? _b : {}).map(function (_a) {\n    var identity = _a[0],\n        element = _a[1].element;\n    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {\n      key: identity\n    }, element);\n  }), children));\n};\n/**\r\n * Hook to indicate if the current component is being rendered inside of a\r\n * `SpaceKitProvider`\r\n */\n\n\nfunction useHasSpaceKitProvider() {\n  return !!React__default.useContext(SpaceKitStateContext);\n}\n/**\r\n * Hook to get the values from the Space Kit Provider with sensible defaults for\r\n * all the values.\r\n *\r\n * This component does _not_ require us to be wrapped with `SpaceKitProvider`\r\n */\n\n\nfunction useSpaceKitProvider() {\n  var context = React__default.useContext(SpaceKitStateContext);\n\n  if (context == null) {\n    // Provide a default because consumers are not required to wrap their\n    // components with our providers\n    return defaultState;\n  }\n\n  return context;\n}\n/**\r\n * Hook intended to be used internally to communicate with `SpaceKitProvider`\r\n * indicating singleton components being mounted and unmounted.\r\n *\r\n * Use `show` to track when you show a component.\r\n *\r\n * Use `hide` to track when you remove a component.\r\n */\n\n\nfunction useSingletonComponent() {\n  var setSpaceKitContext = React__default.useContext(SpaceKitSetContext);\n  var hide = React__default.useCallback(function (_a) {\n    var identity = _a.identity;\n    setSpaceKitContext === null || setSpaceKitContext === void 0 ? void 0 : setSpaceKitContext(function (state) {\n      if (state === void 0) {\n        state = defaultState;\n      }\n\n      if (!state.singletonComponents[identity]) {\n        // This should never happen; we should never be trying to decrement\n        // something that isn't rendered.\n        return state;\n      }\n\n      if (state.singletonComponents[identity].instanceCount.current === 1) {\n        // This is the last instance; delete it from the component and return\n        // a new state to trigger a re-render.\n        var singletonComponentsCopy = _tslib.__assign({}, state.singletonComponents);\n\n        delete singletonComponentsCopy[identity];\n        return _tslib.__assign(_tslib.__assign({}, state), {\n          singletonComponents: singletonComponentsCopy\n        });\n      } // Decrement the instance count and return the original `state` so this\n      // won't trigger a re-render.\n\n\n      state.singletonComponents[identity].instanceCount.current -= 1;\n      return state;\n    });\n  }, [setSpaceKitContext]);\n  var show = React__default.useCallback(function (_a) {\n    var identity = _a.identity,\n        element = _a.element;\n    setSpaceKitContext === null || setSpaceKitContext === void 0 ? void 0 : setSpaceKitContext(function (previousState) {\n      var _a;\n\n      if (previousState === void 0) {\n        previousState = defaultState;\n      }\n\n      if (!previousState.singletonComponents[identity]) {\n        // This is the first time ths identity is being rendered. Create the\n        // entry in `singletonComponents` and modify `state` to trigger a\n        // re-render.\n        return _tslib.__assign(_tslib.__assign({}, previousState), {\n          singletonComponents: _tslib.__assign(_tslib.__assign({}, previousState.singletonComponents), (_a = {}, _a[identity] = {\n            element: element,\n            instanceCount: {\n              current: 1\n            }\n          }, _a))\n        });\n      } // This identity exists. Increment the instanceCount and return the\n      // original state to avoid a re-render.\n\n\n      previousState.singletonComponents[identity].instanceCount.current += 1;\n      return previousState;\n    });\n  }, [setSpaceKitContext]);\n  return {\n    hide: hide,\n    show: show\n  };\n}\n\nexports.SpaceKitProvider = SpaceKitProvider;\nexports.useHasSpaceKitProvider = useHasSpaceKitProvider;\nexports.useSingletonComponent = useSingletonComponent;\nexports.useSpaceKitProvider = useSpaceKitProvider;","map":{"version":3,"mappings":"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","names":["defaultState","disableAnimations","singletonComponents","theme","SpaceKitStateContext","React","createContext","undefined","SpaceKitSetContext","SpaceKitProvider","_a","children","nextState","useMemo","_c","useState","state","setState","useEffect","currState","Provider","value","Object","entries","map","identity","element","Fragment","key","useHasSpaceKitProvider","useContext","useSpaceKitProvider","context","useSingletonComponent","setSpaceKitContext","hide","useCallback","instanceCount","current","singletonComponentsCopy","show","previousState"],"sources":["../src/SpaceKitProvider/index.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\";\n\ninterface State {\n  /**\n   * Disable all JavaScript based animations\n   *\n   * This includes Framer Motion animations and manual css values.\n   *\n   * @default false\n   */\n  disableAnimations: boolean;\n\n  singletonComponents: Record<\n    string,\n    {\n      element: ReturnType<React.FC>;\n      instanceCount: React.MutableRefObject<number>;\n    }\n  >;\n\n  theme: \"light\" | \"dark\";\n}\n\nconst defaultState: State = {\n  disableAnimations: false,\n  singletonComponents: {},\n  theme: \"light\",\n};\n\n// This implementation is based on the excellent blog post by Kent C. Dodds on\n// How to use React Context effectively:\n// https://kentcdodds.com/blog/how-to-use-react-context-effectively\n\nconst SpaceKitStateContext = React.createContext<State | undefined>(undefined);\nconst SpaceKitSetContext = React.createContext<\n  React.Dispatch<React.SetStateAction<State>> | undefined\n>(undefined);\n\n/**\n * Provider to set options on all Space Kit components\n *\n * This is completely optional; components will not have issues if this is\n * missing from the context.\n *\n * A good place to use this would be in your storybook configuration as a\n * decorator applied to all components if we're running inside of chromatic.\n */\nexport const SpaceKitProvider: React.FC<Partial<\n  Pick<State, \"theme\" | \"disableAnimations\">\n>> = ({ children, theme, disableAnimations }) => {\n  const nextState = useMemo(\n    () => ({\n      theme: theme ?? defaultState.theme,\n      disableAnimations: disableAnimations ?? defaultState.disableAnimations,\n      singletonComponents: {},\n    }),\n    [theme, disableAnimations],\n  );\n  const [state, setState] = React.useState<State>(nextState);\n\n  useEffect(() => {\n    setState((currState) => ({\n      ...nextState,\n      singletonComponents: currState.singletonComponents,\n    }));\n  }, [nextState]);\n\n  return (\n    <SpaceKitStateContext.Provider value={state}>\n      <SpaceKitSetContext.Provider value={setState}>\n        {Object.entries(state?.singletonComponents ?? {}).map(\n          ([identity, { element }]) => {\n            return <React.Fragment key={identity}>{element}</React.Fragment>;\n          },\n        )}\n        {children}\n      </SpaceKitSetContext.Provider>\n    </SpaceKitStateContext.Provider>\n  );\n};\n\n/**\n * Hook to indicate if the current component is being rendered inside of a\n * `SpaceKitProvider`\n */\nexport function useHasSpaceKitProvider(): boolean {\n  return !!React.useContext(SpaceKitStateContext);\n}\n\n/**\n * Hook to get the values from the Space Kit Provider with sensible defaults for\n * all the values.\n *\n * This component does _not_ require us to be wrapped with `SpaceKitProvider`\n */\nexport function useSpaceKitProvider(): Readonly<State> {\n  const context = React.useContext(SpaceKitStateContext);\n\n  if (context == null) {\n    // Provide a default because consumers are not required to wrap their\n    // components with our providers\n    return defaultState;\n  }\n\n  return context;\n}\n\n/**\n * Hook intended to be used internally to communicate with `SpaceKitProvider`\n * indicating singleton components being mounted and unmounted.\n *\n * Use `show` to track when you show a component.\n *\n * Use `hide` to track when you remove a component.\n */\nexport function useSingletonComponent(): {\n  hide: ({ identity }: { identity: string }) => void;\n  show: ({\n    identity,\n    element,\n  }: {\n    identity: string;\n    element: ReturnType<React.FC>;\n  }) => void;\n} {\n  const setSpaceKitContext = React.useContext(SpaceKitSetContext);\n\n  const hide = React.useCallback(\n    ({ identity }: { identity: string }) => {\n      setSpaceKitContext?.((state = defaultState) => {\n        if (!state.singletonComponents[identity]) {\n          // This should never happen; we should never be trying to decrement\n          // something that isn't rendered.\n          return state;\n        }\n\n        if (state.singletonComponents[identity].instanceCount.current === 1) {\n          // This is the last instance; delete it from the component and return\n          // a new state to trigger a re-render.\n          const singletonComponentsCopy = { ...state.singletonComponents };\n          delete singletonComponentsCopy[identity];\n\n          return {\n            ...state,\n            singletonComponents: singletonComponentsCopy,\n          };\n        }\n\n        // Decrement the instance count and return the original `state` so this\n        // won't trigger a re-render.\n        state.singletonComponents[identity].instanceCount.current -= 1;\n        return state;\n      });\n    },\n    [setSpaceKitContext],\n  );\n\n  const show = React.useCallback(\n    ({\n      identity,\n      element,\n    }: {\n      identity: string;\n      element: ReturnType<React.FC>;\n    }) => {\n      setSpaceKitContext?.((previousState = defaultState) => {\n        if (!previousState.singletonComponents[identity]) {\n          // This is the first time ths identity is being rendered. Create the\n          // entry in `singletonComponents` and modify `state` to trigger a\n          // re-render.\n          return {\n            ...previousState,\n            singletonComponents: {\n              ...previousState.singletonComponents,\n              [identity]: { element, instanceCount: { current: 1 } },\n            },\n          };\n        }\n\n        // This identity exists. Increment the instanceCount and return the\n        // original state to avoid a re-render.\n        previousState.singletonComponents[identity].instanceCount.current += 1;\n        return previousState;\n      });\n    },\n    [setSpaceKitContext],\n  );\n\n  return { hide, show };\n}\n"]},"metadata":{},"sourceType":"script"}